# Load past models from path to resume training or test
def load(path):
    gen = build_generator((hop, shape, 1))
    siam = build_siamese((hop, shape, 1))
    critic = build_critic((hop, 3*shape, 1))
    gen.load_weights(path+'/gen.h5')
    critic.load_weights(path+'/critic.h5')
    siam.load_weights(path+'/siam.h5')
    return gen, critic, siam

# Build models


def build():
    gen = build_generator((hop, shape, 1))
    siam = build_siamese((hop, shape, 1))
    # the discriminator accepts as input spectrograms of triple the width of those generated by the generator
    critic = build_critic((hop, 3*shape, 1))
    return gen, critic, siam

# Generate a random batch to display current training results


def testgena():
    sw = True
    while sw:
        a = np.random.choice(aspec)
        if a.shape[1]//shape != 1:
            sw = False
    dsa = []
    if a.shape[1]//shape > 6:
        num = 6
    else:
        num = a.shape[1]//shape
    rn = np.random.randint(a.shape[1]-(num*shape))
    for i in range(num):
        im = a[:, rn+(i*shape):rn+(i*shape)+shape]
        im = np.reshape(im, (im.shape[0], im.shape[1], 1))
        dsa.append(im)
    return np.array(dsa, dtype=np.float32)

# Show results mid-training


def save_test_image_full(path):
    a = testgena()
    print(a.shape)
    ab = gen(a, training=False)
    ab = testass(ab)
    a = testass(a)
    abwv = deprep(ab)
    awv = deprep(a)
    sf.write(path+'/new_file.wav', abwv, sr)
    IPython.display.display(IPython.display.Audio(np.squeeze(abwv), rate=sr))
    IPython.display.display(IPython.display.Audio(np.squeeze(awv), rate=sr))
    fig, axs = plt.subplots(ncols=2)
    axs[0].imshow(np.flip(a, -2), cmap=None)
    axs[0].axis('off')
    axs[0].set_title('Source')
    axs[1].imshow(np.flip(ab, -2), cmap=None)
    axs[1].axis('off')
    axs[1].set_title('Generated')
    plt.show()

# Save in training loop


# use custom save_path (i.e. Drive '../content/drive/My Drive/')
def save_end(epoch, gloss, closs, mloss, n_save=3, save_path='../content/'):
    if epoch % n_save == 0:
        print('Saving...')
        path = f'{save_path}/MELGANVC-{str(gloss)[:9]}-{str(closs)[:9]}-{str(mloss)[:9]}'
        os.mkdir(path)
        gen.save_weights(path+'/gen.h5')
        critic.save_weights(path+'/critic.h5')
        siam.save_weights(path+'/siam.h5')
        save_test_image_full(path)
